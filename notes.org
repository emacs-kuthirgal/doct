#+TITLE: DOCT notes
#+archive: %s_archive::datetree/
* Bugs :bug:
* Documentation :documentation:
* Optimizations :optimization:
** similar logic between doct--replace-template-strings and doct--validate-template-maybe
Can these be generalized into single function?
* Features :feature:
* Enhancements :enhancement:
** IDEA eliminate or reduce use of doct--fill-template
vanilla syntax for elisp execution already exists.
Would it be worth it to replace %{KEYWORD} during conversion
and return a string?
#+begin_src emacs-lisp
"%{key}" -> "%((doct-get key))"
#+end_src
What do we gain? Template string is more transparent to user?
doct-get can't handle case where key's value is a function...

** IDEA doct--type-check take pair as first arg? Returns pair if succesful
May reduce verbosity when using doct--first-in...
* Miscellaneous :misc:
** RESEARCH [[file:~/.emacs.d/straight/repos/doct/doct.el::defun doct--constraint-rule-list (constraint value][why do we only need eval in one case?]]
Both macros return lambdas...

- Note taken on [2020-03-30 Mon 23:42] \\
  Comment from elfeed-link.el which may be of relevance:

  #+begin_src emacs-lisp
  ;;;###autoload
  (eval-after-load 'org
    `(funcall
      ;; The extra quote below is necessary because uncompiled closures
      ;; do not evaluate to themselves. The quote is harmless for
      ;; byte-compiled function objects.
      ',(lambda ()
          ;;omitting body of lambda... ~NV
          )))
  #+end_src
** Unload byte compiled file loaded by straight.el when developing
#+begin_src emacs-lisp :results silent
(when (featurep 'doct)
  (unload-feature 'doct t))
(load-file "~/.emacs.d/straight/repos/doct/doct.el")
#+end_src
